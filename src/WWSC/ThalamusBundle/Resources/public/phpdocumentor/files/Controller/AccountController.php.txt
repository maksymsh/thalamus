<?php

/**
 *  Account controller
 * 
 */

namespace WWSC\ThalamusBundle\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use HWI\Bundle\OAuthBundle\OAuth\Response\UserResponseInterface;

/**
 * Account controler
 *
 * In this controller describes the functions of registration new account and display pages dashboard, To-Dos, Calendar, Settings, Templates for account.
 */
class AccountController extends Controller {

    /**
     *  Method list
     * 
     *  This method is responsible for display companies and persons on  the page "All People"
     */
    public function allPeopleAction(Request $request) {
        $this->getRequest()->getSession()->set('active_module', 'all-people');
        $oAccount = $this->getDoctrine()->getManager()->getRepository('WWSCThalamusBundle:Account')->find($request->getSession()->get('account')->id);
        return $this->render('WWSCThalamusBundle:Account:all-people.html.twig', array('aCompanies' => $oAccount->getCompany()));
    }
    
    /**
     *  Method change account
     * 
     *  This method is responsible for changing the user account
     */
    
    public function changeAccountAction(Request $request) {
        $oAccount = $this->getDoctrine()->getManager()->getRepository('WWSCThalamusBundle:Account')->find($request->get('account'));
        $request->getSession()->set('account', (object) ['slug' => $oAccount->getSlug(), 'name' => $oAccount->getName(), 'id' => $oAccount->getId()]);
        $userManager = $this->container->get('fos_user.user_manager');
        $this->getUser()->setRoles(array($this->getUser()->getCompany()->getRoles()));
        $this->getUser()->setLastLoggedAccount($oAccount->getId());
        $userManager->updateUser($this->getUser());
        $token = new UsernamePasswordToken($this->getUser(), null, 'main', $this->getUser()->getRoles());
        $this->container->get('security.context')->setToken($token);
        return $this->redirect($this->generateUrl('wwsc_thalamus_account_dashboard'));
    }
    
    /**
     *  Method  create a new account
     * 
     *  This method is responsible for creating a new account and company ( logged user ).
     */
    
    public function newAccountAction(Request $request) {
        $fAccount = $this->createForm(new \WWSC\ThalamusBundle\Form\AccountForm());
        if ($request->getMethod() == 'POST') {
            $fAccount->bind($request);
            if ($fAccount->isValid()) {
                $fAccount = $fAccount->getData();
                /* create new Account */
                $em = $this->getDoctrine()->getManager();
                $newAccount = new \WWSC\ThalamusBundle\Entity\Account();
                $newAccount->setName($fAccount['name']);
                $em->persist($newAccount);

                /* create new Company */
                $newCompany = new \WWSC\ThalamusBundle\Entity\Company();
                $newCompany->setName($fAccount['name']);
                $newCompany->setAccount($newAccount);
                $newCompany->setRoles('ROLE_PROVIDER');
                $newCompany->setPrimaryCompany(1);
                $newCompany->setTimeZone($fAccount['timeZone']);
                $newCompany->addUser($this->getUser());
                $em->persist($newCompany);
                $this->getUser()->addCompany($newCompany);
                $em->flush();


                /* after save data user,  send confirm letter on mail user */
                $message = \Swift_Message::newInstance()
                        ->setSubject('Create account Thalamus!')
                        ->setFrom($this->container->getParameter('admin_email'))
                        ->setContentType("text/html")
                        ->setTo($this->getUser()->getEmail())
                        ->setBody($this->renderView('WWSCThalamusBundle:Mail:registr_email.txt.twig', array(
                            'username' => $this->getUser()->getUsername(),
                            'first_name' => $this->getUser()->getFirstName(),
                            'url' => $request->getScheme() . '://' . $request->getHttpHost()
                )));

                if (!$this->get('mailer')->send($message)) {
                    $em = $this->getDoctrine()->getManager();
                    $oAccount = $this->getDoctrine()->getRepository('WWSCThalamusBundle:Account')->find($newAccount);
                    $em->remove($oAccount);
                    $em->flush();
                    $request->getSession()->getFlashBag()->add('notice', 'Account has not been  created please try again');
                    $request->getSession()->getFlashBag()->add('status', 'error');
                    return $this->redirect($this->generateUrl('wwsc_thalamus_account_new'));
                }

                $request->getSession()->set('account', (object) ['slug' => $newAccount->getSlug(), 'name' => $newAccount->getName(), 'id' => $newAccount->getId()]);
                $userManager = $this->container->get('fos_user.user_manager');
                $this->getUser()->setRoles(array($this->getUser()->getCompany()->getRoles()));
                $this->getUser()->setLastLoggedAccount($newAccount->getId());
                $userManager->updateUser($this->getUser());

                $token = new UsernamePasswordToken($this->getUser(), null, 'main', $this->getUser()->getRoles());
                $this->container->get('security.context')->setToken($token);

                return $this->redirect($this->generateUrl('wwsc_thalamus_account_dashboard'));
            }
        }
        return $this->render('WWSCThalamusBundle:Account:new-account.html.twig', array('form' => $fAccount->createView()));
    }

    /**
     *  Method dashboard
     *
     *  This method is responsible for display  "account dashboard" page
     */
    public function dashboardAction(Request $request) {
        $request->getSession()->set('active_module', 'dashboard');
        $oAccount = $this->getDoctrine()->getManager()->getRepository('WWSCThalamusBundle:Account')->find($request->getSession()->get('account')->id);
        return $this->render('WWSCThalamusBundle:Account:dashboard.html.twig', array('aProjects' => $oAccount->getProjects()));
    }

    /**
     *  Method header
     * 
     *  This method is responsible for display  header for template account. 
     */
    public function headerAction() {
        return $this->render('WWSCThalamusBundle:Account:header.html.twig');
    }

    /**
     * Method registration
     * 
     * This method is responsible for registration and save new account.
     * 
     * @param  form registration[] data obtained by method post from the registrations form.
     *
     * @return In the case of successful registration, message about successfully create new account. When an error occurs an error message
     */
    public function registrationAccountAction(Request $request) {

        $em = $this->getDoctrine()->getManager();
        $fRegistration = $this->createForm(new \WWSC\ThalamusBundle\Form\RegistrationForm());
        if ($request->getMethod() == 'POST') {
            $fRegistration->bind($request);
            if ($fRegistration->isValid()) {
                $fRegistration = $fRegistration->getData();

                /* create new User */
                $fRegistration->setEnabled(true);
                $fRegistration->setRoles(array('ROLE_PROVIDER'));
                $em->persist($fRegistration);

                $fRegistration->getProfile()->setUser($fRegistration);
                $em->persist($fRegistration);
                $em->flush();
                $token = new UsernamePasswordToken($fRegistration, null, 'main', $fRegistration->getRoles());
                $this->container->get('security.context')->setToken($token);

                /* create new Account */
                $newAccount = new \WWSC\ThalamusBundle\Entity\Account();
                $newAccount->setName($fRegistration->getAccount());
                $em->persist($newAccount);

                /* create new Company */
                $newCompany = new \WWSC\ThalamusBundle\Entity\Company();
                $newCompany->setName($fRegistration->getAccount());
                $newCompany->setAccount($newAccount);
                $newCompany->setRoles('ROLE_PROVIDER');
                $newCompany->setPrimaryCompany(1);
                $newCompany->addUser($this->getUser());
                $newCompany->setTimeZone($fRegistration->getTimezone());
                $em->persist($newCompany);
                $this->getUser()->addCompany($newCompany);
                $em->flush();

                /* after save data user,  send confirm letter on mail user */
                $message = \Swift_Message::newInstance()
                        ->setSubject('Create account Thalamus!')
                        ->setFrom($this->container->getParameter('admin_email'))
                        ->setContentType("text/html")
                        ->setTo($fRegistration->getEmail())
                        ->setBody($this->renderView('WWSCThalamusBundle:Mail:registr_email.txt.twig', array(
                            'username' => $fRegistration->getUsername(),
                            'first_name' => $fRegistration->getFirstName(),
                            'url' => $request->getScheme() . '://' . $request->getHttpHost()
                )));

                if (!$this->get('mailer')->send($message)) {
                    $em = $this->getDoctrine()->getManager();
                    $oAccount = $this->getDoctrine()->getRepository('WWSCThalamusBundle:Account')->find($newAccount->getId());
                    $em->remove($oAccount);
                    $em->flush();
                    $request->getSession()->getFlashBag()->add('notice', 'Account has not been  created please try again');
                    $request->getSession()->getFlashBag()->add('status', 'error');
                    return $this->redirect($this->generateUrl('wwsc_thalamus_registration_account'));
                }

                $request->getSession()->set('account', (object) ['slug' => $newAccount->getSlug(), 'name' => $newAccount->getName(), 'id' => $newAccount->getId()]);
                $userManager = $this->container->get('fos_user.user_manager');
                $this->getUser()->setRoles(array($this->getUser()->getCompany()->getRoles()));
                $this->getUser()->setLastLoggedAccount($newAccount->getId());
                $userManager->updateUser($this->getUser());
                return $this->redirect($this->generateUrl('wwsc_thalamus_account_dashboard'));
            }
        }
        return $this->render('WWSCThalamusBundle:Account:registration.html.twig', array('form' => $fRegistration->createView()));
    }

}

