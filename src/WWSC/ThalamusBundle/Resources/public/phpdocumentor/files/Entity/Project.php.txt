<?php

namespace WWSC\ThalamusBundle\Entity;

use WWSC\ThalamusBundle\WWSCThalamusBundle;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\Common\Collections\Criteria;

/**
 * Company
 *
 * @ORM\Entity
 * @ORM\HasLifecycleCallbacks
 * @ORM\Table(name="project")
 */
class Project {

    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255)
     * @Assert\NotBlank(message="Please enter your project name.")
     * @Assert\Length(
     *     min=3,
     *     max="255",
     *     minMessage="The project name is too short.",
     *     maxMessage="The project name is too long.",
     * )
     */
    private $name;
	
    /**
     * @var string
     *
     * @ORM\Column(name="reply_uid", type="string", length=255, nullable=true)
     *
     */
    private $replyUID;
	
    /**
     * @Gedmo\Slug(fields={"name"})
     * @ORM\Column(length=128, unique=true)
     */
    private $slug;

    /**
     * @var \DateTime $created
     *
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     */
    private $created;

    /**
     * @var \DateTime $updated
     * @Gedmo\Timestampable(on="update")
     * @ORM\Column(type="datetime", nullable=true)
     */
    private $updated;

    /**
     * @var integer
     * 
     * @ORM\ManyToOne(targetEntity="WWSC\ThalamusBundle\Entity\User")
     */
    private $user_created;

    /**
     * @var integer
     * 
     * @ORM\ManyToOne(targetEntity="WWSC\ThalamusBundle\Entity\User")
     */
    private $user_updated;

    /**
     * @ORM\Column(name="is_deleted", type="boolean", nullable=true)
     */
    private $is_deleted = 0;

    /**
     * @ORM\Column(name="is_public_description", type="boolean", nullable=true)
     */
    private $is_public_description = 0;

    /**
     * @var string
     *
     * @ORM\Column(name="description", type="text", nullable=true)
     */
    private $description;

    /**
     *
     * @ORM\ManyToMany(targetEntity="WWSC\ThalamusBundle\Entity\User", inversedBy="projects")
     * @ORM\JoinTable(name="project_user")
    */
    private $users;

    /**
     *
     * @ORM\ManyToMany(targetEntity="WWSC\ThalamusBundle\Entity\Company", inversedBy="projects")
     * @ORM\JoinTable(name="company_project")
     */
    private $companies;
    
    /**
     * @ORM\ManyToOne(targetEntity="WWSC\ThalamusBundle\Entity\Account", inversedBy="account")
     */
    private $account;

    /**
     *
     * @ORM\OneToMany(targetEntity="WWSC\ThalamusBundle\Entity\Message", mappedBy="project", cascade={"all"})
     * @ORM\OrderBy({"id" = "DESC"})
     */
    private $messages;
    
     /**
     * @var integer
     * 
     * @ORM\ManyToOne(targetEntity="WWSC\ThalamusBundle\Entity\Company")
     */
    private $responsible_company;
    
    /**
     *
     * @ORM\OneToMany(targetEntity="WWSC\ThalamusBundle\Entity\Log", mappedBy="project", cascade={"all"})
     * @ORM\OrderBy({"created" = "DESC"})
     */
    private $log;
    
    /**
     *
     * @ORM\OneToMany(targetEntity="WWSC\ThalamusBundle\Entity\Task", mappedBy="project", cascade={"all"})
     * @ORM\OrderBy({"id" = "DESC"})
     */
    private $tasks;

    /**
     *
     * @ORM\OneToMany(targetEntity="WWSC\ThalamusBundle\Entity\Files", mappedBy="project", cascade={"all"})
     * @ORM\OrderBy({"id" = "DESC"})
     */
    private $files;

    /**
     * Constructor
    */
    public function __construct() {
        $this->users = new \Doctrine\Common\Collections\ArrayCollection();
        $this->tasks = new \Doctrine\Common\Collections\ArrayCollection();
        $this->companies = new \Doctrine\Common\Collections\ArrayCollection();
        $this->messages = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    /**
     * Get id
     *
     * @return integer 
     */
    public function getId() {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return Account
     */
    public function setName($name) {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string 
     */
    public function getName() {
        return $this->name;
    }

    /**
     * Add company
     *
     * @param \WWSC\ThalamusBundle\Entity\Company $company
     * @return Account
     */
    public function addCompany(\WWSC\ThalamusBundle\Entity\Company $company) {
        if(!$this->companies->contains($company)){
            $this->companies[] = $company;
        }
        return $this;
    }

    /**
     * Remove company
     *
     * @param \WWSC\ThalamusBundle\Entity\Company $company
     */
    public function removeCompany(\WWSC\ThalamusBundle\Entity\Company $company) {
        foreach($company->getUsers() as $oUser){
            $this->removeUser($oUser);
        }
        $this->companies->removeElement($company);
        
    }

    /**
     * Set slug
     *
     * @param string $slug
     * @return Account
     */
    public function setSlug($slug) {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string 
     */
    public function getSlug() {
        return $this->slug;
    }

    /**
     * Set created
     *
     * @param \DateTime $created
     * @return Project
     */
    public function setCreated($created) {
        $this->created = $created;

        return $this;
    }

    /**
     * Get created
     *
     * @return \DateTime 
     */
    public function getCreated() {
        return $this->created;
    }

    /**
     * Set updated
     *
     * @param \DateTime $updated
     * @return Project
     */
    public function setUpdated($updated) {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get updated
     *
     * @return \DateTime 
     */
    public function getUpdated() {
        return $this->updated;
    }

    /**
     * Set user_created
     * @ORM\PrePersist()
     * @param \WWSC\ThalamusBundle\Entity\User $userCreated
     * @return Company
     */
    public function setUserCreated($userCreated) {
        $this->user_created = WWSCThalamusBundle::getContainer()->get('security.context')->getToken()->getUser();

        return $this;
    }

    /**
     * Get user_created
     *
     * @return \WWSC\ThalamusBundle\Entity\User 
     */
    public function getUserCreated() {
        return $this->user_created;
    }

    /**
     * @ORM\PrePersist()
     * @ORM\PreUpdate
     * Set user_updated
     *
     * @param \WWSC\ThalamusBundle\Entity\User $userUpdated
     * @return Company
     */
    public function setUserUpdated($userUpdated) {
        $this->user_updated = WWSCThalamusBundle::getContainer()->get('security.context')->getToken()->getUser();
        return $this;
    }

    public function getCompaniesNotInProject(){
       $aCompaniesProject = $this->getCompanies()->toArray();
       return $this->getAccount()->getCompany()->filter(
            function($entry) use ($aCompaniesProject) {
                   return (!in_array($entry, $aCompaniesProject));
                }
        );
    }
    /**
     * Get user_updated
     *
     * @return \WWSC\ThalamusBundle\Entity\User 
     */
    public function getUserUpdated() {
        return $this->user_updated;
    }

    /**
     * Set is_deleted
     *
     * @param boolean $isDeleted
     * @return Project
     */
    public function setIsDeleted($isDeleted) {
        $this->is_deleted = $isDeleted;

        if($isDeleted == 1){
            if($this->getMessages()){
                foreach($this->getMessages() as $item){
                    $item->setIsDeleted(1);
                }
            }
            if($this->getTasks()){
                foreach($this->getTasks() as $item){
                    $item->setIsDeleted(1);
                }
            }
            if($this->getFiles()){
                foreach($this->getFiles() as $item){
                    $item->setIsDeleted(1);
                }
            }
        }

        return $this;
    }

    /**
     * Get is_deleted
     *
     * @return boolean 
     */
    public function getIsDeleted() {
        return $this->is_deleted;
    }

    /**
     * Set description
     *
     * @param string $description
     * @return Project
     */
    public function setDescription($description) {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string 
     */
    public function getDescription() {
        return $this->description;
    }


    /**
     * Set account
     * @ORM\PrePersist()
     * @param \WWSC\ThalamusBundle\Entity\Account $account
     * @return Project
     */
    public function setAccount($account) {
        $em = WWSCThalamusBundle::getContainer()->get('doctrine')->getManager();
        $this->account = $em->getRepository('WWSCThalamusBundle:Account')->find(WWSCThalamusBundle::getContainer()->get('session')->get('account')->id);
        return $this;
    }

    /**
     * Get account
     *
     * @return \WWSC\ThalamusBundle\Entity\Account 
     */
    public function getAccount() {
        return $this->account;
    }



    /**
     * Add tasks
     *
     * @param \WWSC\ThalamusBundle\Entity\Task $tasks
     * @return Project
     */
    public function addTask(\WWSC\ThalamusBundle\Entity\Task $tasks) {
        $this->tasks[] = $tasks;

        return $this;
    }

    /**
     * Remove tasks
     *
     * @param \WWSC\ThalamusBundle\Entity\Task $tasks
     */
    public function removeTask(\WWSC\ThalamusBundle\Entity\Task $tasks) {
        $this->tasks->removeElement($tasks);
    }

    /**
     * Get tasks
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getTasks($aFilter = false) {
       if($aFilter && isset($aFilter['filter_due']) || isset($aFilter['filter_responsible'])){
           return $this->getFilterTask($aFilter);
        }
        $criteria = Criteria::create()
                ->where(Criteria::expr()->eq("is_deleted", 0))
                ->orderBy(array("sort" => Criteria::ASC));
        return $this->tasks->matching($criteria);  
    }

    /**
     * Add files
     *
     * @param \WWSC\ThalamusBundle\Entity\Files $files
     * @return Project
     */
    public function addFile(\WWSC\ThalamusBundle\Entity\Files $files) {
        $this->files[] = $files;

        return $this;
    }

    /**
     * Remove files
     *
     * @param \WWSC\ThalamusBundle\Entity\Files $files
     */
    public function removeFile(\WWSC\ThalamusBundle\Entity\Files $files) {
        $this->files->removeElement($files);
    }

    /**
     * Get files
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getFiles($sort = false, $cat = false, $user_created = false) {
        $direction_sort = Criteria::DESC;
        if (!$sort) {
            $sort = 'created';
        }
        if ($sort == 'name') {
            $direction_sort = Criteria::ASC;
        }
        $criteria = Criteria::create()->where(Criteria::expr()->eq("is_deleted", 0));
        $em = WWSCThalamusBundle::getContainer()->get('doctrine')->getManager();
        if ($cat) {
            $criteria->andWhere(Criteria::expr()->eq("category", $em->getRepository('WWSCThalamusBundle:Category')->find($cat)));
        }
        if ($user_created) {
            $criteria->andWhere(Criteria::expr()->eq("user_created", $em->getRepository('WWSCThalamusBundle:User')->find($user_created)));
        }
        $criteria->orderBy(array($sort => $direction_sort));
        return $this->files->matching($criteria);
    }

    public function getFilterTask($aFilter) {
        $qb = WWSCThalamusBundle::getContainer()->get('doctrine')->getManager()->createQueryBuilder();
        $qb->select('t')
                ->from('WWSC\ThalamusBundle\Entity\TaskItem', 'ti')
                ->join('WWSC\ThalamusBundle\Entity\Task', 't', 'WITH', "(ti.task = t.id)")
                ->where('ti.is_deleted = 0')
                ->andWhere('t.is_deleted = 0')
                ->andWhere('t.project = ' . $this->getId());
        $t = $qb->getQuery();
        if (isset($aFilter['filter_due']) && $aFilter['filter_due']) {
            switch ($aFilter['filter_due']) {
                case 'today':
                    $qb->andWhere('ti.due_date >= :min_date')
                            ->andWhere('ti.due_date <= :max_date')
                            ->setParameter(':min_date', new \DateTime("today"))
                            ->setParameter(':max_date', new \DateTime("now"));
                    break;
                case 'tomorrow':
                    $qb->andWhere('ti.due_date >= :min_date')
                            ->andWhere('ti.due_date <= :max_date')
                            ->setParameter(':min_date', new \DateTime("now"))
                            ->setParameter(':max_date', new \DateTime("tomorrow"));
                    break;
                case 'this_week':
                    $qb->andWhere('ti.due_date >= :min_date')
                            ->andWhere('ti.due_date <= :max_date')
                            ->setParameter(':min_date', new \DateTime("monday this week"))
                            ->setParameter(':max_date', new \DateTime("sunday this week"));
                    break;
                case 'next_week':
                    $qb->andWhere('ti.due_date >= :min_date')
                            ->andWhere('ti.due_date <= :max_date')
                            ->setParameter(':min_date', new \DateTime("monday next week"))
                            ->setParameter(':max_date', new \DateTime("sunday next week"));
                    break;
                case 'later':
                    $qb->andWhere('ti.due_date >= :min_date')
                       ->setParameter(':min_date', new \DateTime("now"));
                    break;
            }
        } 
        if (isset($aFilter['filter_responsible']) && $aFilter['filter_responsible']) {
            $qb->andWhere('ti.responsible = ' .$aFilter['filter_responsible']);
        }
            $qb->orderBy('t.sort', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getReportProject($aFilter = false )
    {
        $qb = WWSCThalamusBundle::getContainer()->get('doctrine')->getManager()->createQueryBuilder();
        $qb->select('tt')
            ->from('WWSC\ThalamusBundle\Entity\TimeTracker', 'tt')
            ->join('WWSC\ThalamusBundle\Entity\Comment', 'c', 'WITH', "(tt.comment = c.id)")
            ->join('WWSC\ThalamusBundle\Entity\TaskItem', 'ti', 'WITH', "(c.parent_id = ti.id)")
            ->join('WWSC\ThalamusBundle\Entity\Task', 't', 'WITH', "(ti.task = t.id)")
            ->where('t.project = ' . $this->getId())
            ->andWhere("c.type = 'TaskItem'")
            ->andWhere('c.is_deleted = 0')
            ->andWhere('ti.is_deleted = 0')
            ->andWhere('t.is_deleted = 0');
        if($aFilter){
            if($aFilter['filter_date']){
                $qb->andWhere('tt.date = :date')
                    ->setParameter(':date', $aFilter['filter_date']);
            }
            if($aFilter['filter_person']){
                $qb->andWhere('tt.person = :person')
                    ->setParameter(':person', $aFilter['filter_person']);
            }
            if($aFilter['filter_task']){
                $qb->andWhere('t.id = :task_id')
                    ->setParameter(':task_id', $aFilter['filter_task']);
            }
        }
        return $qb->getQuery()->getResult();
    }

    /**
     * Add messages
     *
     * @param \WWSC\ThalamusBundle\Entity\Message $messages
     * @return Project
     */
    public function addMessage(\WWSC\ThalamusBundle\Entity\Message $messages)
    {
        $this->messages[] = $messages;

        return $this;
    }

    /**
     * Remove messages
     *
     * @param \WWSC\ThalamusBundle\Entity\Message $messages
     */
    public function removeMessage(\WWSC\ThalamusBundle\Entity\Message $messages)
    {
        $this->messages->removeElement($messages);
    }

    /**
     * Get messages
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getMessages($cat = null)
    {
        
       $criteria = Criteria::create()
                ->where(Criteria::expr()->eq("is_deleted", 0))
                ->orderBy(array("id" => Criteria::DESC));
       if($cat){
            $entityManager = WWSCThalamusBundle::getContainer()->get('doctrine')->getManager();
            $criteria->andWhere(Criteria::expr()->eq("category", $entityManager->getRepository('WWSCThalamusBundle:Category')->find($cat)));
       }
       return $this->messages->matching($criteria);
    }

    /**
     * Get log
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getLog()
    {
        $criteria = Criteria::create()
            ->orderBy(array("created" => Criteria::DESC));
        return $this->log->matching($criteria);
    }
    
    /**
     * Get messages
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getSubspeople()
    {
       $aSubsCompanies = array();
       foreach($this->getCompanies() as $oCompany){
        $aSubsCompany = array();
        $aSubsCompany['id'] = $oCompany->getId();
        $aSubsCompany['name'] = $oCompany->getName();
        foreach($oCompany->getUsers() as $oUser){
           $aSubsCompany["people"][$oUser->getId()] = $oUser->getFirstName().' '.$oUser->getLastName();
        }
        array_push($aSubsCompanies, $aSubsCompany);
       }
       return $aSubsCompanies;
    }

    /**
     * Set is_public_description
     *
     * @param boolean $isPublicDescription
     * @return Project
     */
    public function setIsPublicDescription($isPublicDescription)
    {
        $this->is_public_description = $isPublicDescription;

        return $this;
    }

    /**
     * Get is_public_description
     *
     * @return boolean 
     */
    public function getIsPublicDescription()
    {
        return $this->is_public_description;
    }

    /**
     * Add log
     *
     * @param \WWSC\ThalamusBundle\Entity\Log $log
     * @return Project
     */
    public function addLog(\WWSC\ThalamusBundle\Entity\Log $log)
    {
        $this->log[] = $log;

        return $this;
    }

    /**
     * Remove log
     *
     * @param \WWSC\ThalamusBundle\Entity\Log $log
     */
    public function removeLog(\WWSC\ThalamusBundle\Entity\Log $log)
    {
        $this->log->removeElement($log);
    }

    /**
     * Add users
     *
     * @param \WWSC\ThalamusBundle\Entity\User $users
     * @return Project
     */
    public function addUser(\WWSC\ThalamusBundle\Entity\User $users)
    {
        if(!$this->users->contains($users)){
            $this->users[] = $users;
        }
        
        return $this;
    }

    /**
     * Remove users
     *
     * @param \WWSC\ThalamusBundle\Entity\User $users
     */
    public function removeUser(\WWSC\ThalamusBundle\Entity\User $users)
    {
        $this->users->removeElement($users);
    }

    /**
     * Get users
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getUsers($company = false)
    {
        if($company){
            return $this->users->filter(
                function($entry) use ($company) {
                    foreach ($entry->getCompanies() as $oCompany){
                       return in_array($oCompany->getId(), array($company));
                    };
                }
            );
        }
        return $this->users;
    }

    /**
     * Get companies
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getCompanies()
    {
        return $this->companies;
    }



    /**
     * Set responsibleCompany
     *
     * @param \WWSC\ThalamusBundle\Entity\Company $responsibleCompany
     *
     * @return Project
     */
    public function setResponsibleCompany(\WWSC\ThalamusBundle\Entity\Company $responsibleCompany = null)
    {
        $this->responsible_company = $responsibleCompany;
    
        return $this;
    }

    /**
     * Get responsibleCompany
     *
     * @return \WWSC\ThalamusBundle\Entity\Company
     */
    public function getResponsibleCompany()
    {
        return $this->responsible_company;
    }
	
	/**
     * Set replyUID
     *
     * @ORM\PostPersist()
     * @param string $replyUID
     * @return Project
     */
    public function setReplyUID($replyUID)
    {
        $this->replyUID = 'p_'
            . $this->getId()
            . md5(uniqid(rand(), true)) ;
        WWSCThalamusBundle::getContainer()->get('doctrine')->getManager()->flush();

        return $this;
    }

    /**
     * Get replyUID
     *
     * @return string 
     */
    public function getReplyUID()
    {
        return $this->replyUID;
    }
	
}

